<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Snippests on Filtrage Numérique</title>
    <link>https://vincentchoqueuse.github.io/MOOC_filtrage_numerique/snippests/</link>
    <description>Recent content in Snippests on Filtrage Numérique</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr-fr</language><atom:link href="https://vincentchoqueuse.github.io/MOOC_filtrage_numerique/snippests/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python Cheatsheet</title>
      <link>https://vincentchoqueuse.github.io/MOOC_filtrage_numerique/snippests/python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vincentchoqueuse.github.io/MOOC_filtrage_numerique/snippests/python/</guid>
      <description>La librairie Python scipy contient tous les outils nécessaire pour l&amp;rsquo;analyse et l&amp;rsquo;implémentation des filtres. La fonction dlti permet la création de filtre numérique à partir de la forme polynomiale ou factorisée (voir doc). Dans cette &amp;ldquo;cheatsheet&amp;rdquo;, nous utilisons toutefois essentiellement des fonction numpy pour l&amp;rsquo;analyse des filtres afin de rendre le lien entre le cours et l&amp;rsquo;implémentation plus explicite.
b = [0.065,0.13,0.065] a = [1,-1.143,0.413] Implémentation d&amp;rsquo;un filtre Un filtre peut être implémenté par une récurrence.</description>
    </item>
    
  </channel>
</rss>
